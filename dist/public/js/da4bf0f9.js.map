{"version":3,"sources":["webpack://./src/js/gator_components/dynamic_map_modules/modules/calculate_and_display_route.js?","webpack://./src/js/gator_components/dynamic_map_modules/modules/show_steps.js?","webpack://./src/js/gator_components/dynamic_map_modules/modules/autocomplete_directions_handler.js?"],"names":["calculateAndDisplayRoute","directionsService","directionsDisplay","stepDisplay","map","markers","i","length","setMap","colors","request","origin","document","getElementById","value","destination","optimizeWaypoints","travelMode","provideRouteAlternatives","unitSystem","google","maps","UnitSystem","IMPERIAL","drivingOptions","departureTime","Date","now","trafficModel","route","result","status","routes","setOptions","supressMarkers","DirectionsRenderer","directions","routeIndex","polylineOptions","strokeColor","strokeWeight","strokeOpacity","innerHtml","warnings","console","log","setDirections","__webpack_require__","summaryPanel","innerHTML","legs","routeSegment","start_address","end_address","distance","text","r","__webpack_exports__","d","ShowSteps","[object Object]","this","myRoute","steps","marker","Marker","position","start_location","attachInstructionText","instructions","event","addListener","navigationContent","setContent","open","AutocompleteDirectionsHandler","globals","search","control"],"mappings":"yFAAe,SAAAA,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GAEf,QAAAC,EAAA,EAAgBA,EAAAD,EAAAE,OAAoBD,IACpCD,EAAAC,GAAAE,OAAA,MAEA,IAAAC,EAAA,gCAGAC,EAAA,CACAC,OAHAC,SAAAC,eAAA,gBAAAC,MAIAC,YAHAH,SAAAC,eAAA,qBAAAC,MAIAE,mBAAA,EACAC,WAAA,UACAC,0BAAA,EACAC,WAAAC,OAAAC,KAAAC,WAAAC,SACAC,eAAA,CACAC,cAAA,IAAAC,UAAAC,MAAA,MACAC,aAAA,eAIA3B,EAAA4B,MAAAnB,EAAA,SAAAoB,EAAAC,GACA,UAAAA,EAAA,CACA,IAAAC,EAAAF,EAAAE,OAEA,QAAA1B,EAAA,EAAmBA,EAAA0B,EAAAzB,OAAkBD,IACrCJ,EAAA+B,WAAA,CAAkCC,gBAAA,IAClC,IAAAd,OAAAC,KAAAc,mBAAA,CACA/B,MACAgC,WAAAN,EACAO,WAAA/B,EAAA,EACAgC,gBAAA,CAAsBC,YAAA9B,EAAAH,GAAAkC,aAAA,EAAAC,cAAA,QAItB7B,SAAAC,eAAA,kBACA6B,UAAA,OAAAZ,EAAAE,OAAA,GAAAW,SAAA,QAEAC,QAAAC,IAAA,sCAAAd,EAAAD,EAAAE,QAEA9B,EAAA4C,cAAAhB,GAEA,IADmBiB,EAAQ,IAC3B,CAAAjB,EAAA3B,EAAAC,EAAAC,GAEA,IAAAwB,EAAAC,EAAAE,OAAA,GAEAgB,EAAApC,SAAAC,eAAA,iBACAmC,EAAAC,UAAA,GAGA,QAAA3C,EAAA,EAAiBA,EAAAuB,EAAAqB,KAAA3C,OAAuBD,IAAA,CACxC,IAAA6C,EAAA7C,EAAA,EACA0C,EAAAC,WAAA,2BACAD,EAAAC,WAAA,qBAAAE,EACA,WACAH,EAAAC,WAAApB,EAAAqB,KAAA5C,GAAA8C,cAAA,OACAJ,EAAAC,WAAApB,EAAAqB,KAAA5C,GAAA+C,YAAA,OACAL,EAAAC,WAAApB,EAAAqB,KAAA5C,GAAAgD,SAAAC,KAAA,eAzDAR,EAAAS,EAAAC,GAAAV,EAAAW,EAAAD,EAAA,4BAAAzD,qCCAA+C,EAAAS,EAAAC,GAAAV,EAAAW,EAAAD,EAAA,4BAAAE,IAAe,MAAAA,EAEfC,YAAA9B,EAAA3B,EAAAC,EAAAC,GACAwD,KAAAzD,MACAyD,KAAA1D,cACA0D,KAAAC,QAAAhC,EAAAE,OAAA,GAAAkB,KAAA,GACAW,KAAAxD,UAGAuD,cACA,QAAAtD,EAAA,EAAiBA,EAAAuD,KAAAC,QAAAC,MAAAxD,OAA+BD,IAChDuD,KAAAG,OAAAH,KAAAxD,QAAAC,GAAAuD,KAAAxD,QAAAC,IAAA,IAAAc,OAAAC,KAAA4C,OAAA,CACA7D,IAAAyD,KAAAzD,IACA8D,SAAAL,KAAAC,QAAAC,MAAAzD,GAAA6D,iBAEAN,KAAAO,sBAAAP,KAAAG,OAAAH,KAAAC,QAAAC,MAAAzD,GAAA+D,cAIAT,sBAAAI,EAAAT,GACAnC,OAAAC,KAAAiD,MAAAC,YAAAP,EAAA,mBACA,IAAAQ,EAAAjB,EACAM,KAAA1D,YAAAsE,WAAAD,GACAX,KAAA1D,YAAAuE,KAAAb,KAAAzD,IAAA4D,wCCvBAjB,EAAAS,EAAAC,GAAAV,EAAAW,EAAAD,EAAA,4BAAAkB,IAAe,MAAAA,EAEff,YAAAxD,EAAAwE,GACAf,KAAAzD,MACA,MAAAC,QAASA,EAAAM,SAAAI,cAAA8D,SAAAC,UAAAxE,KAAmDsE,EAE5Df,KAAAzD,IAgBAwD,iBAQAA,kBACmCb,EAAQ,GAC3C/C,CAAA6D,KAAA5D,kBAAA4D,KAAA3D,kBAAA2D,KAAA1D,YAAA0D,KAAAzD,IAAAC","file":"js/da4bf0f9.js","sourcesContent":["export default function calculateAndDisplayRoute(directionsService, directionsDisplay, stepDisplay, map, markers) {\n\t// Clear all preceding markers when calculating route.\n\tfor (let i = 0; i < markers.length; i++){\n\tmarkers[i].setMap(null);\n\t} \n\tlet colors = ['#b366ff', '#bf80ff', '#9933ff'];\n\tlet start = document.getElementById('origin-input').value;\n\tlet end = document.getElementById('destination-input').value;\n\tlet request = {\n\t\torigin: start,\n\t\tdestination: end,\n\t\toptimizeWaypoints: true,\n\t\ttravelMode: 'DRIVING',\n\t\tprovideRouteAlternatives: true,\n\t\tunitSystem: google.maps.UnitSystem.IMPERIAL,\n\t\tdrivingOptions: {\n\t\t\tdepartureTime: new Date(Date.now() + 3500000),\n\t\t\ttrafficModel: 'optimistic'\n\t\t}\n\t};\n\n\tdirectionsService.route(request, function(result, status) {\n\t\tif (status === 'OK') {\n\t\t\tlet routes = result.routes;\n\n\t\t\tfor ( let i = 0; i <routes.length; i++){\n\t\t\t\tdirectionsDisplay.setOptions({supressMarkers:true});\n\t\t\t\tnew google.maps.DirectionsRenderer({\n\t\t\t\t\tmap: map,\n\t\t\t\t\tdirections: result,\n\t\t\t\t\trouteIndex: i + 1,\n\t\t\t\t\tpolylineOptions:{strokeColor:colors[i],strokeWeight:8,strokeOpacity:'.8'},\n\t\t\t\t});  \n\t\t\t}\n\n\t\t\tlet warningsPanel = document.getElementById('warnings-panel');\n\t\t\twarningsPanel.innerHtml = '<br>' + result.routes[0].warnings + '</br>';\n\n\t\t\tconsole.log('Direction Service Request STATUS : ' + status + result.routes);\n\n\t\t\tdirectionsDisplay.setDirections(result);\n\t\t\tlet showSteps = require('./show_steps.js');\n\t\t\tnew showSteps(result, stepDisplay, map, markers);\n\n\t\t\tlet route = result.routes[0];\n\t\t\t\n\t\t\tlet summaryPanel = document.getElementById('summary-panel');\n\t\t\tsummaryPanel.innerHTML = '';\n\n\t\t\t// For each route, display summary information.\n\t\t\tfor(let i = 0; i < route.legs.length; i++) {\n\t\t\t\tlet routeSegment = i + 1;\n\t\t\t\tsummaryPanel.innerHTML += '<b> SUMMARY for <br></b>'\n\t\t\t\tsummaryPanel.innerHTML += '<b>Route Segment: ' + routeSegment +\n\t\t\t\t'</b><br>';\n\t\t\t\tsummaryPanel.innerHTML += route.legs[i].start_address + ' to ';\n\t\t\t\tsummaryPanel.innerHTML += route.legs[i].end_address + '<br>';\n\t\t\t\tsummaryPanel.innerHTML += route.legs[i].distance.text + '<br><br>';\n\t\t\t}\n\t\t}\n\t\treturn   \n\t}); \n}","export default class ShowSteps {\n\n\tconstructor (result, stepDisplay, map, markers){\n\t\tthis.map = map;\n\t\tthis.stepDisplay = stepDisplay;\n\t\tthis.myRoute = result.routes[0].legs[0];\n\t\tthis.markers = markers;\n\t}\n\n\trenderSteps () {\n\t\tfor (let i = 0; i < this.myRoute.steps.length; i++) {\n\t\t\tthis.marker = this.markers[i] = this.markers[i] || new google.maps.Marker({\n\t\t\t\tmap: this.map,\n\t\t\t\tposition: this.myRoute.steps[i].start_location\n\t\t\t});\n\t\t\tthis.attachInstructionText(this.marker, this.myRoute.steps[i].instructions);\n\t\t}\n\t}\n\n\tattachInstructionText(marker, text) {\n        google.maps.event.addListener(marker, 'click', function() {\n          let navigationContent = text;\n          this.stepDisplay.setContent(navigationContent);\n          this.stepDisplay.open(this.map, marker);\n        });\n\t}\n}\t","export default class AutocompleteDirectionsHandler {\n\n\tconstructor (map, globals) {\n\t\tthis.map = map;\n\t\tconst { markers, origin, destination, search, control, i } = globals;\n\t\tconst directionsConfig = {\n\t\t\tmap: this.map,\n\t\t\tdraggable: true,\n\t\t\trouteIndex: i,\n\t\t\tpolylineOptions:{strokeColor:'#208000', strokeWeight:10, strokeOpacity:'.95'}\n\t\t};\n\t\t// this.directionsService = new google.maps.DirectionsService();\n\t\t// this.stepDisplay = new google.maps.InfoWindow();\n\t\t// this.originAutocomplete = new google.maps.places.Autocomplete(origin, {});\n\t\t// this.destinationAutocomplete = new google.maps.places.Autocomplete(destination, {});\n\t\t// this.searchAutoComplete = new google.maps.places.Autocomplete(_search, {});\n\t\t// this.directionsDisplay = new google.maps.DirectionsRenderer(directionsConfig);\n\n\t\t// directionsDisplay.setPanel(control);\n\t\t// control.style.display = 'block';\n\t}\n\n\tinitListeners () {\n\t\t// this.originAutocomplete.addEventListener('change', this.onChangeHandler);\n\t\t// document.getElementById('origin-input').addEventListener('change', this.onChangeHandler);\n\n\t\t// this.destinationAutocomplete.addEventListener('change', this.onChangeHandler);\n\t\t// document.getElementById('destination-input').addEventListener('change', this.onChangeHandler);\n\t}\n\n\tonChangeHandler () {\n\t\tconst calculateAndDisplayRoute = require('./calculate_and_display_route.js');\n\t\tcalculateAndDisplayRoute(this.directionsService, this.directionsDisplay, this.stepDisplay, this.map, markers);\n\t}\n}"],"sourceRoot":""}