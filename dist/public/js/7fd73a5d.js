(window.webpackJsonp=window.webpackJsonp||[]).push([[3],[
/*!*************************************!*\
  !*** ./src/js/main.js + 11 modules ***!
  \*************************************/
/*! exports provided: default */
/*! all exports used */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/js/util.js\nclass util_Util {\n\tconstructor (data) {\n\n\t}\n\n\tclearConsole () {\n\t\tconsole.clear();\n\t}\n\n\tlog (data) {\n\t\tconsole.log(data);\n\t}\n}\n// CONCATENATED MODULE: ./src/js/gator_components/main_app/api_key.js\nconst ApiKey = 'AIzaSyAVUjC3CiwXLDElAq0AwWEntiVIfNadpW8';\n\n// CONCATENATED MODULE: ./src/js/gator_components/main_app/model.js\nclass AppModel {\n  constructor() {\n    this.placeholders = [{\n      parameters: {\n        case_number: 'Unify case number',\n        ip_range: '10.0.0.0/32 1234:5678::/48',\n        query_type: 'GEOCODING_API_QUERY / PLACE_API_DETAILS_QUERY',\n        api_endpoint_type: 'ENDPOINT_JAVASCRIPT_API / ENDPOINT_WEB_SERVICE',\n        table_suffix: '20180503, last3days, latest, all',\n        project_number: '1234567891012',\n        client_id: 'gme-XXXXX',\n        project_id: 'my-project1234343',\n        start_date: 'YYYY-MM-DD',\n        end_date: 'YYYY-MM-DD',\n        key: 'AIzaSy***********',\n        table_column: 'QPS column in logs.web_service_qps.all- \"places\"',\n      },\n    }];\n    this.views = {\n      non_iterableViews : null,\n      iterable_views : []\n\n    };\n    this.listOfElementsByClass = [{\n      classArrays : [{\n          classList_1 : [],\n          classList_2 : [],\n          classList_3 : [],\n          classList_4 : [],\n          classList_5 : [],\n          classList_6 : [],\n          classList_7 : [],\n          classList_8 : [],\n      }]\n    }];\n    \n  }\n\n  clearChildViews () {\n    this.views.non_iretableViews = null;\n    this.views.iterable_views = [];\n  }\n\n  getChildViews () {\n    return this.views.iterable_views;\n  }\n\n  setNewChildView (view) {\n    this.views.iterable_views.push(view);\n  }\n\n  getClassList () {\n    return this.listOfElementsByClass[0];\n  }\n\n  getClassListValues () { \n    return Object.valueOf(this.listOfElementsByClass[0].classArrays);;\n  }\n\n  getClassListKeys () {\n    return Object.keys(this.listOfElementsByClass[0].classArrays);\n  }\n\n  getFieldSamples () {\n    return this.placeholders;\n  }\n\n  getParametersList () {\n    return this.placeholders[0];\n  }\n\n  getParameterValues () {\n    return Object.valueOf(this.placeholders[0].parameters);\n  }\n  \n  getParameterKeys () {\n    return Object.keys(this.placeholders[0].parameters);\n  }\n}\n\n// CONCATENATED MODULE: ./src/js/gator_components/main_app/view.js\n\n\nclass view_AppView extends AppModel {\n  constructor () {\n    super ();\n    this.head = document.getElementsByTagName('head')[0];\n    this.viewsButtons = document.getElementsByClassName('dropbtn');\n    this.mainMenu = document.getElementsByTagName('main')[0];\n    this.plxButton = document.getElementById('plx_button');\n    this.mapsButton = document.getElementById('map_button');\n    this.wsButton = document.getElementById('ws_button');\n    this.staticMapButton = document.getElementById('static_map_button');\n    this.viewsPane = document.createElement('section');\n    this.viewsPane.id = 'views_pane';\n    this.mainMenu.insertAdjacentElement('afterend', this.viewsPane);\n  }\n\n  checkAttachedPanes () {\n     if (this.views.iterable_views !== []){\n        this.viewsListHasChildNodes ();\n     } else {\n        super.clearChildViews ();\n        let views = this.viewsPane.childNodes;\n        this.views.non_iterableViews = views;\n        this.checkAndListChildNodes(this.views.non_iterableViews);\n     }\n  }\n\n  viewsListHasChildNodes () {\n    this.clearClassesOnChildNodes ();\n    super.clearChildViews ();\n    let views = this.viewsPane.childNodes;\n    this.checkAndListChildNodes(views);\n    this.checkEachViewIndex ();\n  }\n\n  checkAndListChildNodes (views) {\n    for (let i = 0; i < views.length; i++){\n      let iteratedView = views[i];\n      let index = i;\n      let objectView = {\n        view: iteratedView,\n        count: index\n      };\n      super.setNewChildView(objectView);\n    }\n  }\n\n  clearClassesOnChildNodes () {\n    let values = super.getChildViews ();\n    for(let i = 0; i < values.length; i++){\n      let $elInArray = values[i];\n      console.log($elInArray);\n      if ($elInArray.view.classList.contains('one')) {\n          $elInArray.view.classList.toggle('one');\n          this.listOfElementsByClass[0].classArrays[0].classList_1.pop($elInArray);\n        } else if ($elInArray.view.classList.contains('two')){\n            $elInArray.view.classList.toggle('two');\n            this.listOfElementsByClass[0].classArrays[0].classList_2.pop($elInArray);\n        } else if ($elInArray.view.classList.contains('three')){\n            $elInArray.view.classList.toggle('three');\n            this.listOfElementsByClass[0].classArrays[0].classList_3.pop($elInArray);\n        } else if  ($elInArray.view.classList.contains('four')){\n            $elInArray.view.classList.toggle('four');\n            this.listOfElementsByClass[0].classArrays[0].classList_4.pop($elInArray);\n        } else if  ($elInArray.view.classList.contains('five')){\n            $elInArray.view.classList.toggle('five');\n            this.listOfElementsByClass[0].classArrays[0].classList_5.pop($elInArray);\n        } else if  ($elInArray.view.classList.contains('six')){\n            $elInArray.view.classList.toggle('six');\n            this.listOfElementsByClass[0].classArrays[0].classList_6.pop($elInArray);\n        } else if  ($elInArray.view.classList.contains('seven')){\n            $elInArray.view.classList.toggle('seven');\n            this.listOfElementsByClass[0].classArrays[0].classList_7.pop($elInArray);\n        } else {\n            $elInArray.view.classList.toggle('eight');\n            this.listOfElementsByClass[0].classArrays[0].classList_8.pop($elInArray);\n        }\n    }\n  } \n\n  checkEachViewIndex () {\n    this.views.iterable_views.forEach((viewObject) => {\n        let object = viewObject;\n        if( object.count == 0 ){ \n            object.view.classList.add('one');\n            this.listOfElementsByClass[0].classArrays[0].classList_1.push(object);                       \n          } else if ( object.count == 1 ) {\n                      object.view.classList.add('two');\n                      this.listOfElementsByClass[0].classArrays[0].classList_2.push(object);\n          } else if ( object.count == 2 ) {\n                      object.view.classList.add('three');\n                      this.listOfElementsByClass[0].classArrays[0].classList_3.push(object);                   \n          } else {\n                      object.view.classList.add('four');\n                      this.listOfElementsByClass[0].classArrays[0].classList_4.push(object)\n        }\n        console.log('Classlist for ', \n          object.view.id, ' is now: ', \n          object.view.classList.value, \n          ' : ');\n        console.log(super.getChildViews());\n        console.log(this.listOfElementsByClass[0].classArrays[0]);\n        console.log(object.count);\n        //see this change again, once more..maybe i wont need to refresh .very nice! \n    });    \n  } \n}\n\n\n// CONCATENATED MODULE: ./src/js/gator_components/plx/model.js\nclass ScriptsModel {\n  constructor() {\n    this.initialState = {};\n    this.newState = this.initialState;\n    this.myState = {};\n    this.URL;\n    this.scriptsParentHtml =\n      `<ul id=\"scriptList\" rel='plxScriptWindow' class=''>\n                <h2 class=\"card-header\">Scripts</h2>\n                <div class=\"card-inner\" id=\"plx-InnerCard\"></div>\n            </ul>\n            <div class=\"card\" id=\"parametersContainer\">\n                <div class=\"card-inner\">\n                  <h2 class=\"card-header\">Parameters</h2>\n                  <div id=\"parameters\"></div>\n                </div>\n            </div>`;\n    this.scripts = [{\n        title: ' API usage for specified mafe_weblog API by IP ',\n        id: 'script_5b._a15f62_0000_2cc9_bcc5_001a11404b34',\n        parameters: {\n          'case_number': '',\n          'ip_range': '',\n          'query_type': '',\n          'api_endpoint_type': '',\n          'table_suffix': '',\n          'project_number': '',\n          'client_id': ''\n        }\n      },\n      {\n        title: ' QPS breakdown from Web-Service ',\n        id: 'script_5b._a16102_0000_254d_940f_089e0822b400',\n        parameters: {\n          'table_column': '',\n          'project_number': '',\n          'start_date': '',\n          'end_date': ''\n        }\n      },\n      {\n        title: ' Daily client and web service requests project and API key',\n        id: 'script_5a._f21dfd_0000_2487_9d9b_001a114d8db4',\n        parameters: {\n          'project_id': '',\n          'start_date': '',\n          'end_date': ''\n        }\n      }\n    ];\n  }\n\n  setInitialState(state) {\n    this.newState = state;\n  }\n\n  setInitialStateObject() {\n    let state = {\n      statebasePlxUrl: 'http://plx/scripts2/',\n      id: '',\n      params: '',\n      currentlySelectedScript: '',\n      currentlySelectedScriptIndex: '',\n    };\n    this.initialState = state;\n    this.setInitialState(this.initialState);\n  }\n\n  setNewState(param1, param2) {\n    let state = {\n      basePlxUrl: 'http://plx/scripts2/',\n      id: '',\n      params: '',\n      currentlySelectedScript: param1,\n      currentlySelectedScriptIndex: param2,\n    }\n    this.newState = state;\n    console.log(this.newState);\n    return this.newState;\n  }\n\n  getNewState(index, script) {\n    let myState = this.setNewState(script, index);\n    return myState;\n  }\n\n  getScriptsParentHTML() {\n    return this.scriptsParentHtml;\n  }\n\n  getScripts() {\n    return this.scripts;\n  }\n\n  getScript(index) {\n    return this.scripts[index];\n  }\n\n  getCurrentlySelectedScript() {\n    console.log(this.myState.currentlySelectedScriptIndex);\n    return this.scripts[this.myState.currentlySelectedScriptIndex];\n  }\n\n  getCurrentlySelectedScriptIndex() {\n    return this.myState.currentlySelectedScriptIndex;\n    // console.log(this.currentlySelectedScriptIndex);\n    // return this.currentlySelectedScriptIndex;\n  }\n\n  getParameterNames(scriptIndex) {\n    return Object.keys(this.scripts[scriptIndex].parameters);\n  }\n\n  setParameterValue(scriptIndex, parameterName, parameterValue) {\n    this.scripts[scriptIndex].parameters[parameterName] = parameterValue;\n  }\n\n  getBasePlxUrl() {\n    return this.myState.basePlxUrl;\n  }\n\n  setScriptIdTo(id) {\n    this.myState.url_add_on = id;\n  }\n\n  getScriptId() {\n    return this.myState.url_add_on;\n  }\n\n  setScriptParametersTo(params) {\n    this.myState.params = params;\n  }\n\n  getScriptParameters() {\n    return this.myState.params;\n  }\n\n  setFullUrlTo(_this) {\n    this.URL = _this;\n  }\n\n  getFullUrl() {\n    return this.URL;\n  }\n}\n// CONCATENATED MODULE: ./src/js/gator_components/plx/view.js\n\n\nclass view_ScriptsView extends ScriptsModel {\n  constructor(placeholders, viewPane) {\n    super();\n    this.placeholders = placeholders;\n    this.parentPane = viewPane;\n    this.emptyString = '';\n  }\n\n  initializeView() {\n    this.insertScriptsContainer();\n  }\n\n  insertScriptsContainer () {\n    if (!this.scriptsParent) {\n    this.scriptsParent = document.createElement('div');\n    this.scriptsParent.classList.add('card');\n    this.scriptsParent.id = 'scriptsContainer';\n    this.scriptsParentinnerHTML = ( () => { return super.getScriptsParentHTML(); } )();\n    this.scriptsParent.innerHTML = this.scriptsParentinnerHTML;\n    this.parentPane.insertBefore(this.scriptsParent, this.parentPane.childNodes[0]);\n    this.grabInnerComponent();\n    this.insert(super.getScripts());\n    this.toggleScriptsContainerAndState();\n    } else {\n      this.parentPane.removeChild(this.scriptsParent);\n      this.scriptsParent = null;\n    }\n    \n  }\n\n  grabInnerComponent () {\n    this.ListInnerContainer = document.getElementById('plx-InnerCard');\n    this.parametersContainer = document.getElementById('parametersContainer');\n    this.parametersInnerContainer = document.getElementById('parameters');\n  }\n\n  insert (scripts) {\n    scripts.forEach((script, index) => {\n      let li = document.createElement('li');\n      li.textContent = script.title;\n      li.classList.add('listed-item');\n      li.dataset.index = index;\n      this.ListInnerContainer.appendChild(li);\n      console.log(script);\n    })\n  }\n\n  toggleScriptsContainerAndState() {\n    super.setInitialStateObject();\n    this.resetItems();\n    this.scriptsParent.classList.toggle('show');\n  }\n\n  checkShow() {\n    let parametersParent = this.parametersContainer;\n    if ( !parametersParent.classList.contains('show') ) {\n      parametersParent.classList.toggle('show');\n    } else {\n      parametersParent.classList.remove('show');\n      // document.removeChild(parametersParent);\n      this.resetItems();\n    }\n  }\n\n  visualManager () {\n      this.checkActiveOn(this.myState.currentlySelectedScript);\n      this.render(super.getParameterNames(this.myState.currentlySelectedScriptIndex));\n  }\n\n  checkActiveOn(currentlySelectedScript) {\n    let item = currentlySelectedScript;\n    if ( item.classList.contains('listed-item') ) {\n      if (item.classList.contains('active')) {\n        this.removeActive(item);\n        super.setNewState();\n      } else {\n        super.setNewState();\n        this.removeActive(item);\n        this.matchParamsTo(this.placeholders);\n        item.classList.toggle('active');\n      }\n    }\n  }\n\n  render(parameters) {\n    let parametersHtml = '';\n    parameters.forEach((parameter) => {\n      parametersHtml += `<div class=\"innerParam\"><p class=\"parameter\">\n              <label for=\"${parameter}\">${parameter}:</label></p>\n              <p><input type=\"text\" class=\"input\" id=\"${\n          parameter}\" placeholder=\"\">\n              </p></div>`;\n    });\n    this.parametersInnerContainer.innerHTML = parametersHtml;\n    if (!this.linkLister) {\n      this.linkLister = document.createElement('div');\n      this.linkLister.innerHTML = `<div id=\"linkLister\"></div>`;\n    }\n    this.parametersInnerContainer.appendChild(this.linkLister);\n    this.checkShow();\n  }\n\n  matchParamsTo(placeholders) {\n    let parameterExample;\n    console.log(placeholders);\n    let fieldSamples = Object.entries(placeholders.parameters);\n    fieldSamples.forEach(([key, value], index) => {\n      parameterExample = document.getElementById(`${key}`);\n      if (parameterExample) {\n        parameterExample.setAttribute('placeholder', `${value}`);\n      }\n    });\n  }\n\n  generatePlxUrl() {\n    let script = super.getCurrentlySelectedScript();\n    let addThis = `${script.id}?p=`;\n    super.setScriptIdTo(addThis);\n    console.log(addThis);\n    let params = {};\n    params = Object.entries(script.parameters);\n    let paramBuild = '';\n    params.forEach(([key, value], index) => {\n      paramBuild += `${key}:${value}`;\n      if (index !== params.length - 1) {\n        paramBuild += ',';\n      }\n    });\n    super.setScriptParametersTo(paramBuild);\n    this.URL = super.getBasePlxUrl();\n    this.URL += super.getScriptId();\n    this.URL += super.getScriptParameters();\n    this.renderPlxUrl();\n  }\n\n  renderPlxUrl() {\n    if (!this.plxOutputButton){\n      this.plxOutputButton = document.createElement('a');\n      this.plxOutputButton.id = 'plxOutput';\n    }\n    this.plxOutputButton.target = '_blank';\n    this.plxOutputButton.href = super.getFullUrl();\n    this.plxOutputButton.textContent = 'Head there now!';\n    this.plxOutputButton.classList.add('showLink');\n    this.linkLister.appendChild(this.plxOutputButton);\n    console.log(this.plxOutputButton.href);\n  }\n\n  removeActive(onListedItem) {\n    const item = onListedItem;\n    item.classList.remove('active');\n  }\n\n  resetItems() {\n    let items = document.getElementsByClassName('listed-item');\n    for (let i = 0; i < items.length; i++) {\n      let item = items[i];\n      if ( item.classList.contains('active') ) {\n        this.removeActive(item);\n      }\n    }\n    this.resetLink();\n  }\n\n  resetLink() {\n    this.setNull(this.plxOutputButton);\n  }\n\n  setNull (button) {\n    if (button){\n      button.removeAttribute('href');\n      super.setFullUrlTo(this.emptyString);\n    }\n  }\n}\n\n\n// CONCATENATED MODULE: ./src/js/gator_components/plx/controller.js\n\n\nclass controller_ScriptsController extends view_ScriptsView {\n  constructor(plxButton, placeholders, viewPane) {\n    super(placeholders, viewPane);\n    this.plxButton = plxButton;\n  }\n\n  init() {\n    super.insertScriptsContainer();\n    this.isNowListening();\n  }\n\n  isNowListening() {\n    this.ListInnerContainer.addEventListener(\n      'click', this.onScriptClick.bind(this),\n       false);\n    this.parametersInnerContainer.addEventListener(\n      'input', this.onParameterInput.bind(this),\n       false);\n    console.log(this);\n    \n  }\n\n  onScriptClick (event) {\n    let currentlySelectedScript = this.currentlySelectedScript =\n      event.target;\n    let scriptIndex = parseInt(currentlySelectedScript.dataset.index);\n    if (currentlySelectedScript.classList.contains('listed-item')) {\n      this.myState = super.getNewState(scriptIndex, currentlySelectedScript);\n      super.visualManager();\n    }\n  }\n\n  onParameterInput (event) {\n    super.setFullUrlTo('');\n    const scriptIndex = super.getCurrentlySelectedScriptIndex();\n    const parameterName = event.target.id;\n    const parameterValue = event.target.value;\n    super.setParameterValue(scriptIndex, parameterName, parameterValue);\n    super.generatePlxUrl()\n  }\n}\n\n\n// CONCATENATED MODULE: ./src/js/gator_components/dynamic_map_modules/map/model.js\nclass MapsModel {\n\tconstructor() {\n\t\tthis.map_globals = [{\n\t\t\tsearch : document.getElementById('address'),\n\t\t\tsubmitButton : document.getElementById('submit'),\n\t\t\toriginInput : document.getElementById('origin-input'),\n\t\t\tdestinationInput : document.getElementById('destination-input'),\n\t\t\tmodeSelector : document.getElementById('mode-selector'),\n\t\t\tcontrol : document.getElementById('bars'),\n\t\t\tamerica: {\n\t\t\tlat: 30.2672, \n\t\t\tlng: -97.7431\n\t\t\t},\n\t\t\tmarkers : [],\n\t\t\tids : [],\n\t\t\tdirectionsDisplayList : [],\n\t\t\ti : 0,\n\t\t\tuniqueId : 1\n\t\t\t}];\n\t}\n\n    getMapsGlobals () {\n\t\treturn this.map_globals[0];\n\t}\n}\n\n// CONCATENATED MODULE: ./src/js/gator_components/dynamic_map_modules/map/view.js\n\n\n\nclass view_MapsView extends MapsModel {\n    constructor (placeholders, apiKey, viewPane) {\n      super();\n      this.placeholders = placeholders;\n      this.parentPane = viewPane;\n      this.api_key = apiKey;\n    }\n  \n    initializeMapContainerInsertion() {\n      if (!this.map){\n      this.map = document.createElement('div');\n      this.map.id = \"map\";\n      this.map.classList.add('card');\n      this.parentPane.insertBefore(this.map, this.parentPane.childNodes[0]);\n      this.map.classList.toggle('show');\n      }\n    }\n\n    toggleMapContainer () {\n      if (this.map.classList.contains('show')){\n        this.map.classList.toggle('show');\n      } else {\n        this.map.classList.toggle('show');\n      }\n    }\n  }\n  \n// CONCATENATED MODULE: ./src/js/gator_components/dynamic_map_modules/map/controller.js\n\n\nclass controller_MapsController extends view_MapsView {\n    constructor (util, mapsButton, placeholders, viewPane, key, head) {\n        super(placeholders, key, viewPane);\n        this.util = util;\n        this.mapsButton = mapsButton;\n        this.placeholders = placeholders;\n        this.apiKey = key;\n        this.head = head;\n    }\n\n    init () {\n        if (!this.mapsJS){\n            this.insertMapsScript();\n            super.initializeMapContainerInsertion();\n        }\n    }\n\n    insertMapsScript () {\n            this.mapsJS = document.createElement('script');\n            this.mapsJS.setAttribute('rel', 'Maps_Script');\n            this.mapsJS.src =\n            `https://maps.googleapis.com/maps/api/js?&key=${this.api_key}`;\n            this.mapsJS.addEventListener(\n                'load', this.instantiateMapComponent.bind(this));\n            this.head.appendChild(this.mapsJS);\n        \n    }\n\n    instantiateMapComponent (event) {\n        console.log('This ', event.target.getAttribute('rel'), ' has loaded!');\n        if (!this.styled_map){\n            const { default: DynamicMapController } = __webpack_require__(/*! ./dynamic/controller */ 1);\n            this.styled_map = new DynamicMapController(this.util, this.map, super.getMapsGlobals());\n            console.log('ready to initialize map module!');\n            this.styled_map.init();\n        }\n    }\n\n    isNowListening () {\n        this.mapsButton.addEventListener('click', super.toggleMapContainer,false);\n    }\n}\n\n\n// CONCATENATED MODULE: ./src/js/gator_components/main_app/controller.js\n\n\n\n\n\nclass controller_AppController extends view_AppView {\n  constructor(Util) {\n    super();\n    this.util = new Util;\n    this.apiKey = ApiKey;\n    this.actionButtons = []; \n  }\n\n  onLoadCheckForActionButtons() {\n    for (let i = 0; i < this.viewsButtons.length; i++){\n      let button = this.viewsButtons[i];\n      this.actionButtons.push(button);\n    }\n    this.loadControllers();\n  }\n\n  loadControllers() {\n    this.instantiateControllersWith(\n      this.util, \n      super.getParametersList(), \n      this.mapsButton, \n      this.plxButton, \n      this.head, \n      this.apiKey, \n      this.viewsPane);\n    this.controllerIsNowlistening();\n  }\n\n  instantiateControllersWith (util, placeholders, mapsButton, plxButton, head, apiKey, viewsPane) {\n    console.log('Controllers instantiated: ');\n    if (!this.scriptsController){\n    this.scriptsController = new controller_ScriptsController(plxButton, placeholders, viewsPane);\n    }\n    if (!this.mapsController){\n    this.mapsController = new controller_MapsController (util, mapsButton, placeholders, viewsPane, apiKey, head);\n    }\n  }\n\n  controllerIsNowlistening() {\n    this.actionButtons.forEach( (button) => {\n      button.addEventListener(\n        'click', this.oneButtonWasClicked.bind(this),\n        true);\n    });\n    console.log(this);\n  }\n\n  oneButtonWasClicked (event) {\n    if (event.target.id == 'plx_button'){\n        this.plxShouldLoad(event);\n    } else if (event.target.id == 'map_button'){\n        this.mapShouldLoad(event);\n    } else if (event.target.id == 'ws_button') {\n        console.log('This ws button was tapped');\n        this.wsShouldLoad();\n    } else if (event.target.id == 'static_map_button') {\n        console.log('This static map button was tapped');\n        this.staticMapShouldLoad();\n    }\n    super.checkAttachedPanes();\n  }\n\n  plxShouldLoad(e) {\n    this.scriptsController.init();\n  }\n\n  mapShouldLoad(e) {\n    this.mapsController.init();\n  }\n\n  wsShouldLoad() {\n  \n  }\n\n  staticMapShouldLoad() {\n\n  }\n}\n\n\n// CONCATENATED MODULE: ./src/js/main.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return initialize; });\n\n // import '.././css/dyn_map.css';\n// import '.././css/index.css';\n// import img from '.././images/lockup.png';\n\nfunction initialize() {\n  const main = new controller_AppController(util_Util);\n  main.onLoadCheckForActionButtons();\n}\ninitialize();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},
/*!*******************************************************************************************!*\
  !*** ./src/js/gator_components/dynamic_map_modules/map/dynamic/controller.js + 3 modules ***!
  \*******************************************************************************************/
/*! exports provided: default */
/*! all exports used */function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/js/gator_components/dynamic_map_modules/map/dynamic/model.js\nclass DynamicMapModel {\n    constuctor () {\n        \n    }\n}\n\n// CONCATENATED MODULE: ./src/js/gator_components/dynamic_map_modules/map/dynamic/view.js\n\n\n\nclass view_DynamicMapView extends DynamicMapModel {\n\tconstructor () {\n\t\tsuper();\n\t}\n\n\tinit () {\n\t\t\n\t}\n}\n\n// CONCATENATED MODULE: ./src/js/gator_components/dynamic_map_modules/map/dynamic/initialize_dynamic_map.js\nclass InitializeMap {\n\n  constructor (util, map, mapsGlobals) {\n    this.map_ctx_globals = mapsGlobals;\n    console.log(this.map_ctx_globals)\n;    let { america, control, search, markers, ids, uniqueId } = this.map_ctx_globals;\n    this.util = util\n    this.america = america;\n    this.map = map;\n    this.ids = ids;\n    this.markers = markers;\n    this.search = search;\n    this.control = control;\n    this.uniqueId = uniqueId;\n    this.mapOptions = {\n      zoom: 14,\n      center: this.america,\n      trafficLayer: true,\n      mapTypeControlOptions: {\n              mapTypeIds: ['roadmap', 'satellite', 'hybrid', 'terrain', 'styled_map']\n            }\n    };\n    this.infoWindow = new google.maps.InfoWindow({\n      content: null,\n      });\n    this.name = {name: 'Styled Map'};\n    this.styledMapType = new google.maps.StyledMapType(\n          [\n            {elementType: 'geometry', stylers: [{color: '#000000'}]},\n            {elementType: 'labels.text.fill', stylers: [{color: '#ffffcc'}]},\n            {elementType: 'labels.text.stroke', stylers: [{color: '#db4437'}]},\n            {\n              featureType: 'administrative',\n              elementType: 'geometry.stroke',\n              stylers: [{color: '#009966'}]\n            },\n            {\n              featureType: 'administrative.land_parcel',\n              elementType: 'geometry.stroke',\n              stylers: [{color: '#009966'}]\n            },\n            {\n              featureType: 'administrative.land_parcel',\n              elementType: 'labels.text.fill',\n              stylers: [{color: '#ffffcc'}]\n            },\n            {\n              featureType: 'landscape.natural',\n              elementType: 'geometry',\n              stylers: [{color: '#000000'}]\n            },\n            {\n              featureType: 'poi',\n              elementType: 'geometry',\n              stylers: [{color: '#000000'}]\n            },\n            {\n              featureType: 'poi',\n              elementType: 'labels.text.fill',\n              stylers: [{color: '#ffffcc'}]\n            },\n            {\n              featureType: 'poi.park',\n              elementType: 'geometry.fill',\n              stylers: [{color: '#000000'}]\n            },\n            {\n              featureType: 'poi.park',\n              elementType: 'labels.text.fill',\n              stylers: [{color: '#ffffcc'}]\n            },\n            {\n              featureType: 'road',\n              elementType: 'geometry',\n              stylers: [{color: '#b3ffff'}]\n            },\n            {\n              featureType: 'road.arterial',\n              elementType: 'geometry',\n              stylers: [{color: '#b3ffff'}]\n            },\n            {\n              featureType: 'road.highway',\n              elementType: 'geometry',\n              stylers: [{color: '#b3ffff'}]\n            },\n            {\n              featureType: 'road.highway',\n              elementType: 'geometry.stroke',\n              stylers: [{color: '#009966'}]\n            },\n            {\n              featureType: 'road.highway.controlled_access',\n              elementType: 'geometry',\n              stylers: [{color: '#b3ffff'}]\n            },\n            {\n              featureType: 'road.highway.controlled_access',\n              elementType: 'geometry.stroke',\n              stylers: [{color: '#b3ffff'}]\n            },\n            {\n              featureType: 'road.local',\n              elementType: 'labels.text.fill',\n              stylers: [{color: '#ffffcc'}]\n            },\n            {\n              featureType: 'transit.line',\n              elementType: 'geometry',\n              stylers: [{color: '#b3ffff'}]\n            },\n            {\n              featureType: 'transit.line',\n              elementType: 'labels.text.fill',\n              stylers: [{color: '#b3ffff'}]\n            },\n            {\n              featureType: 'transit.line',\n              elementType: 'labels.text.stroke',\n              stylers: [{color: '#b3ffff'}]\n            },\n            {\n              featureType: 'transit.station',\n              elementType: 'geometry',\n              stylers: [{color: '#b3ffff'}]\n            },\n            {\n              featureType: 'water',\n              elementType: 'geometry.fill',\n              stylers: [{color: '#3399ff'}]\n            },\n            {\n              featureType: 'water',\n              elementType: 'labels.text.fill',\n              stylers: [{color: '#b3ffff'}]\n            }\n          ], this.name);\n\n      this.self = this;\n  }\n\n  initMap () {\n    // this.util.clearConsole();\n    this._map = new google.maps.Map(this.map, this.mapOptions);\n    this._map.mapTypes.set('styled_map', this.styledMapType);\n    this._map.setMapTypeId('styled_map');\n    this._map.controls[google.maps.ControlPosition.TOP_RIGHT].push(this.control);\n    this.trafficLayer = new google.maps.TrafficLayer();\n    this.trafficLayer.setMap(this._map);\n\n    this.geocoder = new google.maps.Geocoder();\n    this.initListeners( this._map, this.self, this.infoWindow);\n  }\n\n  initListeners(_map, context, infoWindow) {\n    this.asyncDirectionsHandler(_map, context);\n    google.maps.event.addListener(_map, 'click', this.asyncClickFunction.bind(this, infoWindow));\n    // document.getElementById('submit').addEventListener('click', this.asyncGeocoderFunction.bind(this));\n  }\n\n  asyncDirectionsHandler (_map, context) {\n    async function directionsHandler (_map, context){\n          const { default: AutocompleteDirectionsHandler } = await __webpack_require__.e(/*! import() | directions_handler_class */ 1).then(__webpack_require__.bind(null, /*! ../../modules/autocomplete_directions_handler */ 7));\n          const autocompleteHandler = new AutocompleteDirectionsHandler(_map, context.map_ctx_globals[0]);\n          autocompleteHandler.initListeners();\n    }\n    directionsHandler(_map, context);\n\n  }\n\n  asyncClickFunction (e, infoWindow) {\n      async function clickedMarker (latLng, map, util, ids, infoWindow, markers, uniqueId) {\n            const { default: clickedMarker } = await __webpack_require__.e(/*! import() | clicked_marker_function */ 0).then(__webpack_require__.bind(null, /*! ../../modules/clicked_marker.js */ 8));\n            clickedMarker(latLng, map, util, ids, infoWindow, markers, uniqueId);\n            util.log('addMarker function completed at point: ' + latLng + ' ' + '.');\n      }\n      clickedMarker(e.latLng, this._map, this.util, this.ids, infoWindow, this.markers, this.uniqueId);\n  }\n\n  asyncGeocoderFunction () {\n      async function geocodeAddress(geocoder, _map, util, infoWindow, markers, ids, uniqueId) {\n            const { default: geocodeAddress } = await __webpack_require__.e(/*! import() | geocode_address_function */ 2).then(__webpack_require__.bind(null, /*! ../../modules/geocode_address.js */ 9));\n            geocodeAddress(geocoder, _map, util, infoWindow, markers, ids, uniqueId);\n            this.util.log('geoCoder submitted user\\'s address input of : ' + this.search.value);\n            }\n        geocodeAddress(this.geocoder, this._map, this.util, this.infoWindow, this.markers, this.ids, this.uniqueId);\n  }\n}\n\n// CONCATENATED MODULE: ./src/js/gator_components/dynamic_map_modules/map/dynamic/controller.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return controller_DynamicMapController; });\n\n\n\nclass controller_DynamicMapController extends view_DynamicMapView {\n    constructor (util, map, mapGlobals) {\n       super(); \n       this.map = map;\n       this.util = util;\n       this.mapGlobals= mapGlobals;\n    }\n\n    init() {\n        this.initiliaze_map_objects_and_listeners = new InitializeMap(\n            this.util, \n            this.map, \n            this.mapGlobals);\n\t\tthis.initiliaze_map_objects_and_listeners.initMap();\n    }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")}],[[0,4]]]);